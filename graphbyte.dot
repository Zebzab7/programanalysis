digraph G {
node [shape=record style=filled fillcolor = gray95]
edge [fontname="Helvetica,Arial,sans-serif"]
subgraph cluster {
j->k[label=" dependency",arrowhead=vee]
g->h[label=" composition",arrowhead=odiamond]
e->f[label=" aggregation",arrowhead=odot]
c->d[label=" realization",arrowhead=dot]
a->b[label=" inheritance",arrowhead=crow]
}
AI[label= <{<b>AI</b>|-maxRecursionDepth:int<br align="left"/>-player:Player<br align="left"/>-otherPlayer:Player<br align="left"/>|+simulateGame(Node,short):Node<br align="left"/>+generateNeighbors(Node):void<br align="left"/>+miniMax(Node):int<br align="left"/>+evalBase(short[][]):int<br align="left"/>+evalEmptySpaces(short[][]):int<br align="left"/>+aiMove(Node):int<br align="left"/>+isValidMove(Node,short):boolean<br align="left"/>+aiTurnSimulate(Node,short):Node<br align="left"/>+updateAiGame(short[][],Player,short):boolean<br align="left"/>+checkAiGameState(short[][],Player):boolean<br align="left"/>}>]
AINode[label= <{<b>AINode</b>|-depth:int<br align="left"/>-gameState:short[][]<br align="left"/>-parent:Node<br align="left"/>-isTerminated:boolean<br align="left"/>-isMax:boolean<br align="left"/>-move:short<br align="left"/>-neighbors:List<Node><br align="left"/>|+isTerminated():boolean<br align="left"/>+getGameState():short[][]<br align="left"/>+getNeighbors():List<Node><br align="left"/>+addNeighbor(Node):void<br align="left"/>+getMove():short<br align="left"/>+isMax():boolean<br align="left"/>+getDepth():int<br align="left"/>+setDepth(int):void<br align="left"/>+getParent():Node<br align="left"/>+setParent(Node):void<br align="left"/>}>]
Car[label= <{<b>Car</b>|-modelName:String<br align="left"/>|+main(String[]):void<br align="left"/>}>]
Game[label= <{<b>Game</b>|-Board:short[][]<br align="left"/>-aiEnabled:boolean<br align="left"/>-aiBenchmarkingEnabled:boolean<br align="left"/>-finished:boolean<br align="left"/>-player:Player<br align="left"/>|+initGame():void<br align="left"/>+runGame():void<br align="left"/>+aiTurn():void<br align="left"/>+enableAI():void<br align="left"/>+playerTurn():void<br align="left"/>+printGame():void<br align="left"/>+updateGame(int):boolean<br align="left"/>+checkGameState():void<br align="left"/>+printScores():void<br align="left"/>+isFinished():boolean<br align="left"/>}>]
GamePlayer[label= <{<b>GamePlayer</b>|+PlayerOne:Player<br align="left"/>+PlayerTwo:Player<br align="left"/>+side:int<br align="left"/>|+values():Player[]<br align="left"/>+valueOf(String):Player<br align="left"/>-$values():Player[]<br align="left"/>}>]
main[label= <{<b>main</b>||+main(String[]):void<br align="left"/>}>]
RunnableDemo[label= <{<b>RunnableDemo</b>||+main(String[]):void<br align="left"/>}>]
RunnableDemoRunnableImpl[label= <{<b>RunnableDemoRunnableImpl</b>|-this$0:RunnableDemo<br align="left"/>|+run():void<br align="left"/>}>]
Vehicle[label= <{<b>Vehicle</b>|-brand:String<br align="left"/>|+honk():void<br align="left"/>}>]
}
